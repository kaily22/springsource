<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- @Componet 활성화 -->
	<context:component-scan
		base-package="com.spring.aop" />
	
	<context:component-scan
		base-package="com.spring.domain" />

	<!-- aop 설정 -->
	<aop:config>
		<aop:aspect ref="log">
			<aop:pointcut expression="execution(* com.spring.domain.Product.getInfo())" id="pointcut" />

<!-- 		<aop:before method="beforeLog" pointcut-ref="pointcut"/> -->
			
			<!-- after : exception 여부와 상관없이 모두 실행 -->
			<!-- exception 이 발생하면 실행 -->
<!-- 		<aop:after method="afterLog" pointcut-ref="pointcut"/> -->
			
			<!-- exception이 발생하면 실행 -->			
<!-- 		<aop:after-throwing method="afterLog" pointcut-ref="pointcut" /> -->
			
			<!-- 메소드 정상수행 시 실행 -->			
<!-- 			<aop:after-returning method="afterLog" pointcut-ref="pointcut" /> -->
			<aop:around method="aroundLog" pointcut-ref="pointcut" />
		</aop:aspect>
	</aop:config>
</beans>
